mod mbuf;
mod mempool;
mod port;

pub use mbuf::*;
pub use mempool::*;
pub use port::*;

use crate::ffi;
use crate::ffi::{AsStr, ToRaw, ToResult};
use failure::{Error, Fail};
use std::os::raw;

/// An error generated by libdpdk
#[derive(Debug, Fail)]
#[fail(display = "{}", _0)]
pub struct DpdkError(String);

impl DpdkError {
    #[inline]
    pub(crate) fn new() -> Self {
        let msg = unsafe { ffi::rte_strerror(ffi::_rte_errno()) };
        DpdkError(msg.as_str().into())
    }
}

pub fn eal_init(args: &[&str]) -> Result<u32, Error> {
    unsafe {
        let mut args = args
            .iter()
            .map(|&s| s.to_owned().to_raw())
            .collect::<Vec<*mut raw::c_char>>();

        ffi::rte_eal_init(args.len() as raw::c_int, args.as_mut_ptr()).to_result()
    }
}
